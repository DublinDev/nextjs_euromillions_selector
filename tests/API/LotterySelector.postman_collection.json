{
	"info": {
		"_postman_id": "4d21c5ac-3018-4c4a-ac90-543bdb828af7",
		"name": "LotterySelector",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5664209"
	},
	"item": [
		{
			"name": "Tests",
			"item": [
				{
					"name": "Tests For Prize Table",
					"item": [
						{
							"name": "InsertCountryResult- Missing drawResultId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Response has the error field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Response has the required error message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors[0]).to.equal(\"Property 'drawId' must be provided and an int: undefined\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let name = pm.globals.get(\"lottery_username\");",
											"let pw = pm.globals.get(\"lottery_password\");",
											"",
											"console.log(`name is expected: ${name === 'adminUser'}`);",
											"console.log(`pw is expected: ${pw === 'howToYellodfw_W22riteAPW1!'}`);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"country\": \"ie\",\n    \"numbersMatched\": \"0 + 0\",\n    \"countrySpecificWinners\": \"00\",\n    \"prizesPerWinner\": \"€000,000\",\n    \"totalWinners\": \"000\",\n    \"prizeFundAmount\": \"0000\",\n    \"prizeCurrency\": \"€\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/addPrizeDetails",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"addPrizeDetails"
									]
								}
							},
							"response": []
						},
						{
							"name": "InsertCountryResult- Missing country",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Response has the error field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Response has the required error message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors[0]).to.equal(\"Property 'country' must be provided and in the provided list: undefined\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"drawId\": {{test_draw_id}},\n    \"numbersMatched\": \"0 + 0\",\n    \"countrySpecificWinners\": \"00\",\n    \"prizeAmountPerWinner\": \"€000,000\",\n    \"totalWinners\": \"000\",\n    \"prizeFundAmount\": \"0000\",\n    \"prizeCurrency\": \"€\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/addPrizeDetails",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"addPrizeDetails"
									]
								}
							},
							"response": []
						},
						{
							"name": "InsertCountryResult- Missing numbersMatched",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Response has the error field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Response has the required error message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors[0]).to.equal(\"Property 'numbersMatched' must be provided: undefined\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"drawId\": {{test_draw_id}},\n    \"country\": \"ie\",\n    \"countrySpecificWinners\": \"00\",\n    \"prizeAmountPerWinner\": \"€000,000\",\n    \"totalWinners\": \"000\",\n    \"prizeFundAmount\": \"0000\",\n    \"prizeCurrency\": \"€\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/addPrizeDetails",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"addPrizeDetails"
									]
								}
							},
							"response": []
						},
						{
							"name": "InsertCountryResult- Missing countrySpecificWinners",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Response has the error field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Response has the required error message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors[0]).to.equal(\"Property 'countrySpecificWinners' must be provided: undefined\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"drawId\": {{test_draw_id}},\n    \"country\": \"ie\",\n    \"numbersMatched\": \"0 + 0\",\n    \"prizeAmountPerWinner\": \"€000,000\",\n    \"totalWinners\": \"000\",\n    \"prizeFundAmount\": \"0000\",\n    \"prizeCurrency\": \"€\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/addPrizeDetails",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"addPrizeDetails"
									]
								}
							},
							"response": []
						},
						{
							"name": "InsertCountryResult- Missing prizesPerWinner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Response has the error field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Response has the required error message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors[0]).to.equal(\"Property 'prizeAmountPerWinner' must be provided: undefined\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"drawId\": {{test_draw_id}},\n    \"country\": \"ie\",\n    \"numbersMatched\": \"0 + 0\",\n    \"countrySpecificWinners\": \"00\",\n    \"totalWinners\": \"000\",\n    \"prizeFundAmount\": \"0000\",\n    \"prizeCurrency\": \"€\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/addPrizeDetails",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"addPrizeDetails"
									]
								}
							},
							"response": []
						},
						{
							"name": "InsertCountryResult- Missing totalWinners",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Response has the error field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Response has the required error message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors[0]).to.equal(\"Property 'totalWinners' must be provided: undefined\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"drawId\": {{test_draw_id}},\n    \"country\": \"ie\",\n    \"numbersMatched\": \"0 + 0\",\n    \"countrySpecificWinners\": \"00\",\n    \"prizeAmountPerWinner\": \"€000,000\",\n    \"prizeFundAmount\": \"0000\",\n    \"prizeCurrency\": \"€\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/addPrizeDetails",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"addPrizeDetails"
									]
								}
							},
							"response": []
						},
						{
							"name": "InsertCountryResult- Missing prizeFundAmount",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Response has the error field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Response has the required error message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors[0]).to.equal(\"Property 'prizeFundAmount' must be provided: undefined\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"drawId\": {{test_draw_id}},\n    \"country\": \"ie\",\n    \"numbersMatched\": \"0 + 0\",\n    \"countrySpecificWinners\": \"00\",\n    \"prizeAmountPerWinner\": \"€000,000\",\n    \"prizesPerWinner\": \"€000,000\",\n    \"totalWinners\": \"000\",\n    \"prizeCurrency\": \"€\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/addPrizeDetails",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"addPrizeDetails"
									]
								}
							},
							"response": []
						},
						{
							"name": "InsertCountryResult- Missing prizeCurrency",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Response has the error field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Response has the required error message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors[0]).to.equal(\"Property 'prizeCurrency' must be provided: undefined\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"drawId\": {{test_draw_id}},\n    \"country\": \"ie\",\n    \"numbersMatched\": \"0 + 0\",\n    \"countrySpecificWinners\": \"00\",\n    \"prizeAmountPerWinner\": \"€000,000\",\n    \"prizesPerWinner\": \"€000,000\",\n    \"totalWinners\": \"000\",\n    \"prizeFundAmount\": \"0000\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/addPrizeDetails",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"addPrizeDetails"
									]
								}
							},
							"response": []
						},
						{
							"name": "InsertCountryResult- Missing multiple parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Response has the error field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Response has the required error messages\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors.length).to.equal(4);",
											"    pm.expect(responseData.errors[0]).to.equal(\"Property 'drawId' must be provided and an int: undefined\");",
											"    pm.expect(responseData.errors[1]).to.equal(\"Property 'country' must be provided and in the provided list: undefined\");",
											"    pm.expect(responseData.errors[2]).to.equal(\"Property 'numbersMatched' must be provided: undefined\");",
											"    pm.expect(responseData.errors[3]).to.equal(\"Property 'prizeFundAmount' must be provided: undefined\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"countrySpecificWinners\": \"00\",\n    \"prizeAmountPerWinner\": \"€000,000\",\n    \"totalWinners\": \"000\",\n    \"prizeCurrency\": \"€\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/addPrizeDetails",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"addPrizeDetails"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Tests for Main Table",
					"item": [
						{
							"name": "InsertNewDrawResult- Missing lotteryType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Response has the error field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Response has the required error message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors[0]).to.equal(\"Property 'lotteryType' must be provided and of a set type: undefined\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"date\": \"10-10-2010\",\n    \"drawNumber\": \"1234\",\n    \"jackpot\": \"€0,000,000\",\n    \"ballMachine\": \"0101\",\n    \"ballSet\": \"E1\",\n    \"totalWinners\": \"1234566778\",\n    \"totalTicketsSold\": \"123456789\",\n    \"outcome\": \"Rollover!\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/addDrawDetails",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"addDrawDetails"
									]
								}
							},
							"response": []
						},
						{
							"name": "InsertNewDrawResult- Missing date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Response has the error field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Response has the required error message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors[0]).to.equal(\"Property 'date' must be provided and in the provided list\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"lotteryType\": \"euromillions\",\n    \"drawNumber\": \"1234\",\n    \"jackpot\": \"€0,000,000\",\n    \"ballMachine\": \"0101\",\n    \"ballSet\": \"E1\",\n    \"totalWinners\": \"1234566778\",\n    \"totalTicketsSold\": \"123456789\",\n    \"outcome\": \"Rollover!\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/addDrawDetails",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"addDrawDetails"
									]
								}
							},
							"response": []
						},
						{
							"name": "InsertNewDrawResult- Missing drawNumber",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Response has the error field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Response has the required error message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors[0]).to.equal(\"Property 'drawNumber' must be provided and an int: undefined\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"lotteryType\": \"euromillions\",\n    \"date\": \"10-10-2010\",\n    \"jackpot\": \"€0,000,000\",\n    \"ballMachine\": \"0101\",\n    \"ballSet\": \"E1\",\n    \"totalWinners\": \"1234566778\",\n    \"totalTicketsSold\": \"123456789\",\n    \"outcome\": \"Rollover!\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/addDrawDetails",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"addDrawDetails"
									]
								}
							},
							"response": []
						},
						{
							"name": "InsertNewDrawResult- Missing jackpot",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Response has the error field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Response has the required error message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors[0]).to.equal(\"Property 'jackpot' must be provided\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"lotteryType\": \"euromillions\",\n    \"date\": \"10-10-2010\",\n    \"drawNumber\": \"1234\",\n    \"ballMachine\": \"0101\",\n    \"ballSet\": \"E1\",\n    \"totalWinners\": \"1234566778\",\n    \"totalTicketsSold\": \"123456789\",\n    \"outcome\": \"Rollover!\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/addDrawDetails",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"addDrawDetails"
									]
								}
							},
							"response": []
						},
						{
							"name": "InsertNewDrawResult- Missing ballMachine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Response has the error field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Response has the required error message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors[0]).to.equal(\"Property 'ballMachine' must be provided\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"lotteryType\": \"euromillions\",\n    \"date\": \"10-10-2010\",\n    \"drawNumber\": \"1234\",\n    \"jackpot\": \"€0,000,000\",\n    \"ballSet\": \"E1\",\n    \"totalWinners\": \"1234566778\",\n    \"totalTicketsSold\": \"123456789\",\n    \"outcome\": \"Rollover!\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/addDrawDetails",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"addDrawDetails"
									]
								}
							},
							"response": []
						},
						{
							"name": "InsertNewDrawResult- Missing ballSet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Response has the error field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Response has the required error message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors[0]).to.equal(\"Property 'ballSet' must be provided\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"lotteryType\": \"euromillions\",\n    \"date\": \"10-10-2010\",\n    \"drawNumber\": \"1234\",\n    \"jackpot\": \"€0,000,000\",\n    \"ballMachine\": \"0101\",\n    \"totalWinners\": \"1234566778\",\n    \"totalTicketsSold\": \"123456789\",\n    \"outcome\": \"Rollover!\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/addDrawDetails",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"addDrawDetails"
									]
								}
							},
							"response": []
						},
						{
							"name": "InsertNewDrawResult- Missing totalWinners",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Response has the error field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Response has the required error message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors[0]).to.equal(\"Property 'totalWinners' must be provided\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"lotteryType\": \"euromillions\",\n    \"date\": \"10-10-2010\",\n    \"drawNumber\": \"1234\",\n    \"jackpot\": \"€0,000,000\",\n    \"ballMachine\": \"0101\",\n    \"ballSet\": \"E1\",\n    \"totalTicketsSold\": \"123456789\",\n    \"outcome\": \"Rollover!\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/addDrawDetails",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"addDrawDetails"
									]
								}
							},
							"response": []
						},
						{
							"name": "InsertNewDrawResult- Missing totalTicketsSold",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Response has the error field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Response has the required error message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors[0]).to.equal(\"Property 'totalTicketsSold' must be provided\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"lotteryType\": \"euromillions\",\n    \"date\": \"10-10-2010\",\n    \"drawNumber\": \"1234\",\n    \"jackpot\": \"€0,000,000\",\n    \"ballMachine\": \"0101\",\n    \"ballSet\": \"E1\",\n    \"totalWinners\": \"1234566778\",\n    \"outcome\": \"Rollover!\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/addDrawDetails",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"addDrawDetails"
									]
								}
							},
							"response": []
						},
						{
							"name": "InsertNewDrawResult- Missing outcome",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Response has the error field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Response has the required error message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors[0]).to.equal(\"Property 'outcome' must one of the expected values: undefined\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"lotteryType\": \"euromillions\",\n    \"date\": \"10-10-2010\",\n    \"drawNumber\": \"1234\",\n    \"jackpot\": \"€0,000,000\",\n    \"ballMachine\": \"0101\",\n    \"ballSet\": \"E1\",\n    \"totalWinners\": \"1234566778\",\n    \"totalTicketsSold\": \"123456789\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/addDrawDetails",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"addDrawDetails"
									]
								}
							},
							"response": []
						},
						{
							"name": "InsertNewDrawResult- Missing multiple parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Response has the error field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Response has the correct number of error message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors.length).to.deep.equal(9)",
											"});",
											"",
											"",
											"pm.test(\"Response has the required error message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors).to.deep.equal([",
											"        \"Property 'drawNumber' must be provided and an int: undefined\",",
											"        \"Property 'lotteryType' must be provided and of a set type: undefined\",",
											"        \"Property 'date' must be provided and in the provided list\",",
											"        \"Property 'jackpot' must be provided\",",
											"        \"Property 'ballMachine' must be provided\",",
											"        \"Property 'ballSet' must be provided\",",
											"        \"Property 'totalWinners' must be provided\",",
											"        \"Property 'totalTicketsSold' must be provided\",",
											"        \"Property 'outcome' must one of the expected values: undefined\"",
											"    ])",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/addDrawDetails",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"addDrawDetails"
									]
								}
							},
							"response": []
						},
						{
							"name": "InsertNewDrawResult- Unknown lotteryType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Response has the error field\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.errors).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Response has the required error message\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.errors[0]).to.equal(",
											"        \"Property 'lotteryType' must be provided and of a set type: unknown lottery\"",
											"    )",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"lotteryType\": \"unknown lottery\",\n    \"date\": \"10-10-2010\",\n    \"drawNumber\": \"1234\",\n    \"jackpot\": \"€0,000,000\",\n    \"ballMachine\": \"0101\",\n    \"ballSet\": \"E1\",\n    \"totalWinners\": \"1234566778\",\n    \"totalTicketsSold\": \"123456789\",\n    \"outcome\": \"Rollover!\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/addDrawDetails",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"addDrawDetails"
									]
								}
							},
							"response": []
						}
					],
					"description": "Adding tests for the main draw table. Currently called NewDrawTable"
				},
				{
					"name": "Tests for NormalNumber",
					"item": [
						{
							"name": "Normal Num- Missing drawId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Response has the error field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Response has the required error message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors[0]).to.equal(\"Property 'drawId' must be provided and an int: undefined\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"number\": \"5\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/addNormalNumber",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"addNormalNumber"
									]
								}
							},
							"response": []
						},
						{
							"name": "Normal Num- Missing number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Response has the error field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Response has the required error message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors[0]).to.equal(\"Property 'number' must be provided and between 1 and 50: undefined\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"drawId\": {{test_draw_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/addNormalNumber",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"addNormalNumber"
									]
								}
							},
							"response": []
						},
						{
							"name": "Normal Num- Number out of range",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Response has the error field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Response has the required error message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors[0]).to.equal(\"Property 'number' must be provided and between 1 and 50: 59\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"drawId\": {{test_draw_id}},\n    \"number\": \"59\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/addNormalNumber",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"addNormalNumber"
									]
								}
							},
							"response": []
						},
						{
							"name": "Normal Num- Number is 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Response has the error field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Response has the required error message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors[0]).to.equal(\"Property 'number' must be provided and between 1 and 50: 0\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"drawId\": {{test_draw_id}},\n    \"number\": \"0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/addNormalNumber",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"addNormalNumber"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Tests for Bonus Number",
					"item": [
						{
							"name": "Bonus Num- Missing drawId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Response has the error field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Response has the required error message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors[0]).to.equal(\"Property 'drawId' must be provided and an int: undefined\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"number\": \"5\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/addBonusNumber",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"addBonusNumber"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bonus Num- Missing number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Response has the error field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Response has the required error message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors[0]).to.equal(\"Property 'number' must be provided and between 0 and 12: undefined\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"drawId\": {{test_draw_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/addBonusNumber",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"addBonusNumber"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bonus Num- Number out of range",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Response has the error field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Response has the required error message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors[0]).to.equal(\"Property 'number' must be provided and between 0 and 12: 45\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"drawId\": {{test_draw_id}},\n    \"number\": \"45\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/addBonusNumber",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"addBonusNumber"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bonus Num- Number is 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Response has the error field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Response has the required error message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors[0]).to.equal(\"Property 'number' must be provided and between 0 and 12: 0\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"drawId\": {{test_draw_id}},\n    \"number\": \"0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/addBonusNumber",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"addBonusNumber"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Tests for getAllDatesOfDraws",
					"item": [
						{
							"name": "getAllDatesOfDraws- Missing searchYear",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"",
											"pm.test(\"Response has the error field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.error).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Response has the required error message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.error).to.equal(\"Property \\\"searchYear\\\" must be provided and an int: undefined\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/getAllDatesOfDraws",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"getAllDatesOfDraws"
									]
								}
							},
							"response": []
						},
						{
							"name": "getAllDatesOfDraws-  searchYear as text",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"",
											"pm.test(\"Response has the error field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.error).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Response has the required error message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.error).to.equal(\"Property \\\"searchYear\\\" must be provided and an int: Nineteen Ninty Nine\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"searchYear\": \"Nineteen Ninty Nine\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/getAllDatesOfDraws",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"getAllDatesOfDraws"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Tests for queryDb",
					"item": [
						{
							"name": "queryDB- Missing query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Response has the error field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.error).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Error message has correct response\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.error).to.be.equal(\"Property 'sqlQuery' must be provided : undefined\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/queryDB",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"queryDB"
									]
								}
							},
							"response": []
						},
						{
							"name": "queryDB- Invalid query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Response has the error field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.error).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Jackpot is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.error).to.be.equal('The provided SQL query violates a safety check and is not allowed');",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sqlQuery\": \"Insert * FROM dffdsf ORDER BY id DESC LIMIT 5\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/queryDB",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"queryDB"
									]
								}
							},
							"response": []
						}
					],
					"description": "These are the tests for the function which sends SQL queries to the database."
				},
				{
					"name": "Success Flow",
					"item": [
						{
							"name": "1. InsertNewDrawResult",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    postman.setNextRequest(\"6. End\");",
											"}",
											"// pm.collectionVariables.set(\"test_draw_id\", response);",
											"pm.variables.set(\"test_draw_id\", response.id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"lotteryType\": \"euromillions\",\n    \"date\": \"10-10-2010\",\n    \"drawNumber\": {{test_draw_id}},\n    \"jackpot\": \"€0,000,000\",\n    \"ballMachine\": \"0101\",\n    \"ballSet\": \"E1\",\n    \"totalWinners\": \"1234566778\",\n    \"totalTicketsSold\": \"123456789\",\n    \"outcome\": \"Rollover!\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/addDrawDetails",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"addDrawDetails"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. InsertNormalNumber",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"console.log(response);",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response body contains id property of a number\", function () {",
											"    pm.expect(response).to.haveOwnProperty('id');",
											"    pm.expect(response[\"id\"]).to.match(/^\\d+$/);",
											"});",
											"",
											"",
											"pm.test(\"Returned ID is greater than or equal to 0\", function () {    ",
											"    pm.expect(Number(response[\"id\"])).to.be.gte(0);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Returned ID is an integer\", function () {",
											"    pm.expect(response[\"id\"]).to.match(/^\\d+$/);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"drawId\": {{test_draw_id}},\n    \"number\": \"5\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/addNormalNumber",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"addNormalNumber"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. InsertBonusNumber",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field 'id'\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.id).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Check that id is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"The id should be unique for each execution\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"drawId\": {{test_draw_id}},\n    \"number\": \"5\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/addBonusNumber",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"addBonusNumber"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. InsertCountryResult",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Response status code is 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Returned ID is a number\", function () {",
											"    pm.expect(response['id']).to.be.a('number');",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Response is not empty\", function () {",
											"  pm.expect(pm.response.text()).to.not.be.empty;",
											"});",
											"",
											"",
											"pm.test(\"The returned id is greater than or equal to 0\", function () {",
											"    pm.expect(response.id).to.be.at.least(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"drawId\": {{test_draw_id}},\n    \"country\": \"ie\",\n    \"numbersMatched\": \"0 + 0\",\n    \"countrySpecificWinners\": \"00\",\n    \"prizeAmountPerWinner\": \"€000,000\",\n    \"totalWinners\": \"000\",\n    \"prizeFundAmount\": \"0000\",\n    \"prizeCurrency\": \"€\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/addPrizeDetails",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"addPrizeDetails"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. removeDrawDetails",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    console.log(responseData.message);",
											"",
											"    pm.expect(responseData.message).to.be.a('string').and.to.equal(\"Records deleted successfully\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"if(pm.response.code !== 200){",
											"    console.log(JSON.stringify(pm.response, null, 2));",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"drawNumber\": {{test_draw_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/removeDrawDetails",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"removeDrawDetails"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. End",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}",
									"host": [
										"{{url}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Api Calls",
			"item": [
				{
					"name": "InsertNewDrawResult",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"lotteryType\": \"euromillions\",\n    \"date\": \"10-10-2010\",\n    \"drawNumber\": {{test_draw_id}},\n    \"jackpot\": \"€0,000,000\",\n    \"ballMachine\": \"0101\",\n    \"ballSet\": \"E1\",\n    \"totalWinners\": \"1234566778\",\n    \"totalTicketsSold\": \"123456789\",\n    \"outcome\": \"Rollover!\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/addDrawDetails",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"addDrawDetails"
							]
						}
					},
					"response": []
				},
				{
					"name": "InsertNormalNumber",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(response);",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response body contains id property of a number\", function () {",
									"    pm.expect(response).to.haveOwnProperty('id');",
									"    pm.expect(response[\"id\"]).to.match(/^\\d+$/);",
									"});",
									"",
									"",
									"pm.test(\"Returned ID is greater than or equal to 0\", function () {    ",
									"    pm.expect(Number(response[\"id\"])).to.be.gte(0);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"",
									"pm.test(\"Returned ID is an integer\", function () {",
									"    pm.expect(response[\"id\"]).to.match(/^\\d+$/);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"drawId\": {{test_draw_id}},\n    \"number\": \"5\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/addNormalNumber",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"addNormalNumber"
							]
						}
					},
					"response": []
				},
				{
					"name": "InsertBonusNumber",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required field 'id'\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.id).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Check that id is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"The id should be unique for each execution\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"drawId\": {{test_draw_id}},\n    \"number\": \"5\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/addBonusNumber",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"addBonusNumber"
							]
						}
					},
					"response": []
				},
				{
					"name": "InsertCountryResult",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Response status code is 200\", function() {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Returned ID is a number\", function () {",
									"    pm.expect(response['id']).to.be.a('number');",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"",
									"pm.test(\"Response is not empty\", function () {",
									"  pm.expect(pm.response.text()).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"The returned id is greater than or equal to 0\", function () {",
									"    pm.expect(response.id).to.be.at.least(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"drawId\": {{test_draw_id}},\n    \"country\": \"ie\",\n    \"numbersMatched\": \"0 + 0\",\n    \"countrySpecificWinners\": \"00\",\n    \"prizeAmountPerWinner\": \"€000,000\",\n    \"totalWinners\": \"000\",\n    \"prizeFundAmount\": \"0000\",\n    \"prizeCurrency\": \"€\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/addPrizeDetails",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"addPrizeDetails"
							]
						}
					},
					"response": []
				},
				{
					"name": "removeDrawDetails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required field - message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    console.log(responseData.message);",
									"",
									"    pm.expect(responseData.message).to.be.a('string').and.to.equal(\"Records deleted successfully\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"drawNumber\": {{test_draw_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/removeDrawDetails",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"removeDrawDetails"
							]
						}
					},
					"response": []
				},
				{
					"name": "queryDB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate the response body is an array\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('array');",
									"});",
									"",
									"",
									"pm.test(\"Jackpot is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function (item) {",
									"        pm.expect(item.jackpot).to.be.a('number').and.to.be.at.least(0);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"TotalTicketsSold is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item.totalTicketsSold).to.be.a('number').and.to.be.at.least(0);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"sqlQuery\": \"SELECT * FROM NewDrawResult\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/queryDB",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"queryDB"
							]
						}
					},
					"response": []
				},
				{
					"name": "getAllDatesOfDraws",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response is an array with at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf.at.least(1);",
									"});",
									"",
									"",
									"pm.test(\"Each element in the response array has the required field 'date'\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function (element) {",
									"        pm.expect(element.date).to.exist;",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Each 'date' field is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(item){",
									"        pm.expect(item.date).to.match(/^\\d{2}-\\d{2}-\\d{4}$/);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Response time is within acceptable range\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"searchYear\": \"2023\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/getAllDatesOfDraws",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"getAllDatesOfDraws"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{lottery_password}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{lottery_username}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "test_draw_id",
			"value": "9999999",
			"type": "string"
		}
	]
}